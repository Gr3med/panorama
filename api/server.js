// server.js (ุงููุณุฎุฉ ุงููุญุฏุซุฉ)

import express from 'express';
import cors from 'cors';
import sqlite3 from 'sqlite3';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';
// --- โโโ ุฅุฒุงูุฉ axios ---
// import axios from 'axios'; 

import { sendReportEmail } from './notifications.js'; 
import { createCumulativePdfReport } from './pdfGenerator.js';
// --- โโโ ุงุณุชูุฑุงุฏ ูุญุฏุฉ ุงููุงุชุณุงุจ ุงูุฌุฏูุฏุฉ โโโ ---
import { sendPdfReportToWhatsapp } from './whatsappClient.js';

dotenv.config();

// --- 1. ุงูุฅุนุฏุงุฏุงุช ูุงูุซูุงุจุช ---
const __dirname = path.dirname(fileURLToPath(import.meta.url));
const PORT = process.env.PORT || 3000;
const REVIEWS_THRESHOLD = 1;
// --- โโโ ุฅุฒุงูุฉ ูุชุบูุฑุงุช ุงูุฑุจุท ุงูุฎุงุฑุฌู ---
// const BOT_WEBHOOK_URL = 'http://localhost:9090/send-report';
// const WEBHOOK_API_SECRET = 'YourSuperSecretKeyForBotCommunication123!';
let newReviewsCounter = 0;

// --- 2. ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช (ูุง ุชุบููุฑ ููุง) ---
const db = new sqlite3.Database('./hotel_reviews.db', (err) => {
    if (err) return console.error('โ ูุดู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:', err.message);
    console.log('โ ุชู ุงูุงุชุตุงู ุจูุฌุงุญ ุจูุงุนุฏุฉ ุจูุงูุงุช SQLite.');
    db.run(`
        CREATE TABLE IF NOT EXISTS reviews (
            id INTEGER PRIMARY KEY AUTOINCREMENT, date TEXT, floor INTEGER, roomNumber INTEGER,
            guestName TEXT, guestPhone TEXT, email TEXT, internet INTEGER, maintenance INTEGER,
            reception INTEGER, bathroom INTEGER, laundry INTEGER, security INTEGER,
            minimarket INTEGER, lobby INTEGER, restaurant INTEGER, cleanliness INTEGER,
            howDidYouHear TEXT, suggestions TEXT, createdAt DATETIME DEFAULT CURRENT_TIMESTAMP
        );
    `, (err) => {
        if (!err) console.log("โ ุงูุฌุฏูู ุฌุงูุฒ.");
    });
});

// --- 3. ุฅุนุฏุงุฏ ุชุทุจูู Express (ูุง ุชุบููุฑ ููุง) ---
const app = express();
app.use(cors());
app.use(express.json());
app.use(express.static(__dirname));

// --- 4. ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ ูุฅูุดุงุก ูุฅุฑุณุงู ุงูุชูุงุฑูุฑ (ุชู ุชุนุฏูููุง) ---
async function runReportGeneration() {
    console.log("\n--- [ุงููููุฉ ุงูุฑุฆูุณูุฉ] ุจุฏุก ุนูููุฉ ุฅูุดุงุก ูุฅุฑุณุงู ุงูุชูุฑูุฑ ---");
    try {
        console.log("   -> ุงูุฎุทูุฉ 1: ุณุญุจ ุงูุจูุงูุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช...");
        const statsQuery = `SELECT COUNT(id) as total_reviews, AVG(internet) as avg_internet, AVG(maintenance) as avg_maintenance, AVG(reception) as avg_reception, AVG(bathroom) as avg_bathroom, AVG(laundry) as avg_laundry, AVG(security) as avg_security, AVG(minimarket) as avg_minimarket, AVG(lobby) as avg_lobby, AVG(restaurant) as avg_restaurant, AVG(cleanliness) as avg_cleanliness FROM reviews;`;
        const recentReviewsQuery = `SELECT * FROM reviews ORDER BY createdAt DESC LIMIT 5`;
        const stats = await new Promise((resolve, reject) => db.get(statsQuery, (err, row) => err ? reject(err) : resolve(row)));
        const recentReviews = await new Promise((resolve, reject) => db.all(recentReviewsQuery, (err, rows) => err ? reject(err) : resolve(rows)));
        if (!stats || stats.total_reviews == 0) {
            console.log("   -> [ุชูุจูู] ูุง ุชูุฌุฏ ุจูุงูุงุช ูุงููุฉุ ุชู ุฅูุบุงุก ุฅูุดุงุก ุงูุชูุฑูุฑ.");
            return;
        }
        
        console.log("   -> ุงูุฎุทูุฉ 2: ุฌุงุฑู ุฅูุดุงุก ููู PDF ุจุงุณุชุฎุฏุงู Puppeteer...");
        const logoDataUri = `data:image/jpeg;base64,${fs.readFileSync(path.join(__dirname, 'logo.jpg')).toString('base64')}`;
        const { pdfBuffer, emailHtmlContent } = await createCumulativePdfReport(stats, recentReviews, logoDataUri);
        
        console.log("   -> ุงูุฎุทูุฉ 3: ููู PDF ุฌุงูุฒุ ุฌุงุฑู ุฅุฑุณุงูู...");
        const emailSubject = `๐ ุชูุฑูุฑ ุงุณุชุจูุงู ุงูููุฏู (${stats.total_reviews} ุชูููู)`;
        const whatsappCaption = `*ุชูุฑูุฑ ุงุณุชุจูุงู ููุฏู ุจุงููุฑุงูุง*\n\nุฅุฌูุงูู ุงูุชููููุงุช ุญุชู ุงูุขู: ${stats.total_reviews}`;

        // --- โโโ ุชุนุฏูู ุขููุฉ ุงูุฅุฑุณุงู โโโ ---
        await Promise.all([
            sendReportEmail(emailSubject, emailHtmlContent, [{ filename: `Hotel-Report.pdf`, content: pdfBuffer }]),
            // ุงุณุชุฏุนุงุก ุฏุงูุฉ ุงููุงุชุณุงุจ ุจุฏูุงู ูู axios
            sendPdfReportToWhatsapp(pdfBuffer, whatsappCaption) 
        ]);

        console.log("--- [ุงููููุฉ ุงูุฑุฆูุณูุฉ] โ ูุฌุญุช ุงูุนูููุฉ! ุชู ุฅุฑุณุงู ุงูุชูุฑูุฑ ุนุจุฑ ุงูุฅูููู ูุงููุงุชุณุงุจ. ---\n");
    } catch (error) {
        console.error("--- [ุงููููุฉ ุงูุฑุฆูุณูุฉ] โ ุญุฏุซ ูุดู ุญุงุฏ ูู ุนูููุฉ ุฅูุดุงุก ุงูุชูุฑูุฑ ุฃู ุฅุฑุณุงูู. ---");
        console.error("   -> ุชูุงุตูู ุงูุฎุทุฃ:", error.message);
        console.error("----------------------------------------------------------------------\n");
    }
}

// --- 5. ุฅุนุฏุงุฏ ูุณุงุฑ API ูุงุณุชูุจุงู ุงูุชููููุงุช (ูุง ุชุบููุฑ ููุง) ---
app.post('/api/review', (req, res) => {
    const { 
        date, floor, roomNumber, guestName, mobileNumber, email, 
        internet, maintenance, reception, bathroom, laundry, security, 
        minimarket, lobby, restaurant, cleanliness, comments 
    } = req.body;
    
    const query = `
        INSERT INTO reviews(
            date, floor, roomNumber, guestName, guestPhone, email, 
            internet, maintenance, reception, bathroom, laundry, security, 
            minimarket, lobby, restaurant, cleanliness, suggestions
        ) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `;
    
    const params = [
        date, floor, roomNumber, guestName, mobileNumber, email, 
        internet, maintenance, reception, bathroom, laundry, security, 
        minimarket, lobby, restaurant, cleanliness, comments
    ];

    db.run(query, params, function(err) {
        if (err) {
            console.error("Error inserting data:", err);
            return res.status(500).json({ success: false, message: 'ุฎุทุฃ ูู ุงูุณูุฑูุฑ ุนูุฏ ุญูุธ ุงูุจูุงูุงุช.' });
        }
        newReviewsCounter++;
        console.log(`๐ ุชูููู ุฌุฏูุฏ. ุงูุนุฏุงุฏ: ${newReviewsCounter}/${REVIEWS_THRESHOLD}`);
        if (newReviewsCounter >= REVIEWS_THRESHOLD) {
            runReportGeneration();
            newReviewsCounter = 0;
        }
        res.status(201).json({ success: true, message: 'ุดูุฑูุง ูู! ุชู ุงุณุชูุงู ุชููููู ุจูุฌุงุญ.' });
    });
});

// --- 6. ุชุดุบูู ุงูุฎุงุฏู (ูุง ุชุบููุฑ ููุง) ---
app.listen(PORT, () => console.log(`๐ ุงูุณูุฑูุฑ ูุนูู ุนูู http://localhost:${PORT}`));